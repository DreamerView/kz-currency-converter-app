const currencyMap = {};
    const currencyNames = {
  "AUD": "–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä üá¶üá∫",
  "AZN": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç üá¶üáø",
  "AMD": "–ê—Ä–º—è–Ω—Å–∫–∏–π –¥—Ä–∞–º üá¶üá≤",
  "BYN": "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å üáßüáæ",
  "BRL": "–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª üáßüá∑",
  "HUF": "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π —Ñ–æ—Ä–∏–Ω—Ç üá≠üá∫",
  "HKD": "–ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä üá≠üá∞",
  "GEL": "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏ üá¨üá™",
  "DKK": "–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞ üá©üá∞",
  "AED": "–î–∏—Ä—Ö–∞–º –û–ê–≠ üá¶üá™",
  "USD": "–î–æ–ª–ª–∞—Ä –°–®–ê üá∫üá∏",
  "EUR": "–ï–≤—Ä–æ üá™üá∫",
  "INR": "–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è üáÆüá≥",
  "IRR": "–ò—Ä–∞–Ω—Å–∫–∏–π —Ä–∏–∞–ª üáÆüá∑",
  "CAD": "–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä üá®üá¶",
  "CNY": "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å üá®üá≥",
  "KWD": "–ö—É–≤–µ–π—Ç—Å–∫–∏–π –¥–∏–Ω–∞—Ä üá∞üáº",
  "KGS": "–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º üá∞üá¨",
  "MYR": "–ú–∞–ª–∞–π–∑–∏–π—Å–∫–∏–π —Ä–∏–Ω–≥–≥–∏—Ç üá≤üáæ",
  "MXN": "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–µ –ø–µ—Å–æ üá≤üáΩ",
  "MDL": "–ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ª–µ–π üá≤üá©",
  "NOK": "–ù–æ—Ä–≤–µ–∂—Å–∫–∞—è –∫—Ä–æ–Ω–∞ üá≥üá¥",
  "PLN": "–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π üáµüá±",
  "SAR": "–°–∞—É–¥–æ–≤—Å–∫–∏–π —Ä–∏—è–ª üá∏üá¶",
  "RUB": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å üá∑üá∫",
  "XDR": "–°–î–† (—Å–ø–µ—Ü–ø—Ä–∞–≤–∞) üåê",
  "SGD": "–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä üá∏üá¨",
  "TJS": "–¢–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏ üáπüáØ",
  "THB": "–¢–∞–π—Å–∫–∏–π –±–∞—Ç üáπüá≠",
  "TRY": "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞ üáπüá∑",
  "UZS": "–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º üá∫üáø",
  "UAH": "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞ üá∫üá¶",
  "GBP": "–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ üá¨üáß",
  "CZK": "–ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞ üá®üáø",
  "SEK": "–®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞ üá∏üá™",
  "CHF": "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫ üá®üá≠",
  "ZAR": "–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥ üáøüá¶",
  "KRW": "–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞ üá∞üá∑",
  "JPY": "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞ üáØüáµ",
  "KZT": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ üá∞üáø"
};

    let amountInput, resultOutput;

    const updateResult = () => {
      const amount = parseFloat(amountInput.rawValue.replace(/\s/g, ''));
      const from = document.getElementById("fromCurrency").value;
      const to = document.getElementById("toCurrency").value;
      document.getElementById("currencyLabel").textContent = to;
      if (!from || !to || isNaN(amount)) return resultOutput.set(0);
      const converted = amount * (currencyMap[from] / currencyMap[to]);
      resultOutput.set(converted);
    };

    const swapCurrencies = () => {
      const from = document.getElementById("fromCurrency");
      const to = document.getElementById("toCurrency");
      [from.value, to.value] = [to.value, from.value];
      updateResult();
    };

    const loadCurrency = async () => {
      try {
        const res = await fetch("https://api.allorigins.win/raw?url=https://nationalbank.kz/rss/rates_all.xml",{cache: "no-store"});
        const xml = await res.text();
        localStorage.setItem("currency", xml);
        localStorage.setItem("currency_time", new Date().toISOString());
        renderCurrency(xml);
        showOfflineNotice(false);
      } catch (e) {
        const cached = localStorage.getItem("currency");
        const cachedTime = localStorage.getItem("currency_time");
        if (cached && cachedTime) {
          renderCurrency(cached);
          showOfflineNotice(true, cachedTime);
        } else {
          document.getElementById("render-alert-no-data").classList.remove("d-none");
        }
      }
      finally {
        document.getElementById("loading").classList.add("d-none");
        document.getElementById("response").classList.remove("d-none");
      }
    };

    const renderCurrency = xmlStr => {
      const xml = new DOMParser().parseFromString(xmlStr, "text/xml");
      const items = [...xml.querySelectorAll("item")];
      const fromSelect = document.getElementById("fromCurrency");
      const toSelect = document.getElementById("toCurrency");

      currencyMap["KZT"] = 1;
      fromSelect.innerHTML = toSelect.innerHTML = '';

      const allCodes = ["KZT"];

      items.forEach(item => {
        const code = item.querySelector("title")?.textContent;
        const rate = parseFloat(item.querySelector("description")?.textContent);
        const quant = parseFloat(item.querySelector("quant")?.textContent);
        const value = rate / quant;
        currencyMap[code] = value;
        allCodes.push(code);
      });

      allCodes.forEach(code => {
        const label = currencyNames[code] || code;
        const option = `<option value="${code}" title="${label}">${label}</option>`;
        fromSelect.innerHTML += option;
        toSelect.innerHTML += option;
      });

      fromSelect.value = "KZT";
      toSelect.value = "USD";
      document.getElementById("currencyLabel").textContent = "USD";
      updateResult();
    };

    window.addEventListener("load", () => {
      loadCurrency();
      amountInput = new AutoNumeric("#amount", {
        digitGroupSeparator: ' ',
        decimalCharacter: '.',
        decimalPlaces: 2
      });
      resultOutput = new AutoNumeric("#result", {
        readOnly: true,
        watchExternalChanges: true,
        digitGroupSeparator: ' ',
        decimalCharacter: '.',
        decimalPlaces: 2
      });
    });

    document.getElementById("fromCurrency").addEventListener("change", updateResult);
    document.getElementById("toCurrency").addEventListener("change", updateResult);
    document.getElementById("amount").addEventListener("input", updateResult);

    function showOfflineNotice(offline, time) {
      if (offline) {
        document.getElementById("render-alert-offline").classList.remove("d-none");
        const d = new Date(time);
        document.getElementById("render-offline").innerHTML = `<h5>‚ö†Ô∏è –ë–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞</h5><p class="m-0">–î–∞–Ω–Ω—ã–µ –æ—Ç ${d.toLocaleString()}</p>`;
      }
    }